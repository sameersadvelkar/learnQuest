{
  "id": 5,
  "moduleId": 2,
  "title": "JSX Fundamentals",
  "description": "Learn the syntax and rules of JSX",
  "type": "reading",
  "orderIndex": 0,
  "content": {
    "text": "JSX (JavaScript XML) is a syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript files. It's what makes React components so intuitive to write and understand.\n\n## JSX Syntax Rules\n\n### 1. Single Parent Element\nJSX expressions must have exactly one parent element:\n\n```jsx\n// ✅ Correct\nreturn (\n  <div>\n    <h1>Title</h1>\n    <p>Content</p>\n  </div>\n);\n\n// ❌ Incorrect\nreturn (\n  <h1>Title</h1>\n  <p>Content</p>\n);\n```\n\n### 2. Self-Closing Tags\nElements without content must be self-closed:\n\n```jsx\n<img src=\"image.jpg\" alt=\"Description\" />\n<input type=\"text\" />\n<br />\n```\n\n### 3. JavaScript in JSX\nUse curly braces to embed JavaScript expressions:\n\n```jsx\nconst name = 'React';\nreturn <h1>Hello, {name}!</h1>;\n```\n\n### 4. Class vs ClassName\nUse `className` instead of `class` for CSS classes:\n\n```jsx\n<div className=\"container\">\n  <p className=\"text-large\">Content</p>\n</div>\n```\n\n## JSX vs HTML Differences\n\n- `className` instead of `class`\n- `htmlFor` instead of `for`\n- Style objects instead of style strings\n- Event handlers use camelCase (`onClick`, `onChange`)"
  },
  "isRequired": true,
  "estimatedDuration": 25
}