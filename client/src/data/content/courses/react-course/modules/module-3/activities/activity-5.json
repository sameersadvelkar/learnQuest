{
  "id": 15,
  "moduleId": 3,
  "title": "Project: Build a Task Manager",
  "description": "Capstone project combining state management and event handling skills",
  "type": "project",
  "orderIndex": 4,
  "duration": 60,
  "isLocked": false,
  "content": {
    "type": "capstone_project",
    "title": "Task Manager Application",
    "overview": "Build a complete task management application that demonstrates mastery of React state management and event handling. This project will serve as a portfolio piece.",
    "objectives": [
      "Implement complex state management patterns",
      "Handle multiple event types effectively", 
      "Create a polished user interface",
      "Apply React best practices",
      "Build reusable components"
    ],
    "requirements": {
      "core_features": [
        {
          "feature": "Task Creation",
          "description": "Users can add new tasks with title, description, and priority",
          "acceptance_criteria": [
            "Form validation prevents empty submissions",
            "Tasks appear immediately after creation",
            "Priority levels: High, Medium, Low with color coding"
          ],
          "points": 20
        },
        {
          "feature": "Task Management",
          "description": "Complete CRUD operations for tasks",
          "acceptance_criteria": [
            "Mark tasks as complete/incomplete",
            "Edit existing task details",
            "Delete tasks with confirmation",
            "Drag and drop reordering"
          ],
          "points": 25
        },
        {
          "feature": "Filtering & Search",
          "description": "Users can filter and search through tasks",
          "acceptance_criteria": [
            "Filter by completion status (All, Active, Completed)",
            "Filter by priority level",
            "Search by task title or description",
            "Clear all filters option"
          ],
          "points": 20
        },
        {
          "feature": "Local Storage",
          "description": "Persist tasks between browser sessions",
          "acceptance_criteria": [
            "Tasks save automatically",
            "Data loads on page refresh",
            "Handle corrupted data gracefully"
          ],
          "points": 15
        }
      ],
      "bonus_features": [
        {
          "feature": "Due Dates",
          "description": "Add due date functionality",
          "points": 10
        },
        {
          "feature": "Categories/Tags",
          "description": "Organize tasks with categories",
          "points": 10
        },
        {
          "feature": "Statistics Dashboard",
          "description": "Show completion rates and productivity metrics",
          "points": 15
        }
      ]
    },
    "starter_template": {
      "structure": "task-manager/\n├── src/\n│   ├── components/\n│   │   ├── TaskForm.jsx\n│   │   ├── TaskList.jsx\n│   │   ├── TaskItem.jsx\n│   │   ├── FilterBar.jsx\n│   │   └── SearchBox.jsx\n│   ├── hooks/\n│   │   ├── useLocalStorage.js\n│   │   └── useTasks.js\n│   ├── utils/\n│   │   └── taskHelpers.js\n│   └── App.jsx",
      "initial_code": "// App.jsx starter template\nimport React, { useState, useEffect } from 'react';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport FilterBar from './components/FilterBar';\nimport SearchBox from './components/SearchBox';\nimport './App.css';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // TODO: Implement task management functions\n  const addTask = (taskData) => {\n    // Implementation needed\n  };\n\n  const updateTask = (taskId, updates) => {\n    // Implementation needed\n  };\n\n  const deleteTask = (taskId) => {\n    // Implementation needed\n  };\n\n  const toggleTask = (taskId) => {\n    // Implementation needed\n  };\n\n  // TODO: Implement filtering logic\n  const filteredTasks = tasks; // Replace with actual filtering\n\n  return (\n    <div className=\"app\">\n      <header>\n        <h1>Task Manager</h1>\n      </header>\n      <main>\n        <TaskForm onAddTask={addTask} />\n        <div className=\"controls\">\n          <SearchBox \n            searchTerm={searchTerm} \n            onSearchChange={setSearchTerm} \n          />\n          <FilterBar \n            currentFilter={filter} \n            onFilterChange={setFilter} \n          />\n        </div>\n        <TaskList \n          tasks={filteredTasks}\n          onUpdateTask={updateTask}\n          onDeleteTask={deleteTask}\n          onToggleTask={toggleTask}\n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;"
    },
    "resources": [
      {
        "title": "React State Patterns Guide",
        "type": "documentation",
        "url": "#",
        "description": "Comprehensive guide to state management patterns"
      },
      {
        "title": "Event Handling Best Practices",
        "type": "article",
        "url": "#",
        "description": "Common patterns and pitfalls in React event handling"
      },
      {
        "title": "Local Storage Integration",
        "type": "tutorial",
        "url": "#",
        "description": "How to persist React state with localStorage"
      }
    ],
    "evaluation_criteria": {
      "code_quality": {
        "weight": 30,
        "criteria": [
          "Clean, readable code structure",
          "Proper component separation",
          "Consistent naming conventions",
          "Appropriate use of React patterns"
        ]
      },
      "functionality": {
        "weight": 40,
        "criteria": [
          "All core features implemented",
          "Error handling and edge cases",
          "Responsive user interface",
          "Smooth user experience"
        ]
      },
      "state_management": {
        "weight": 20,
        "criteria": [
          "Efficient state updates",
          "Immutable state patterns",
          "Appropriate use of useState",
          "Data flow clarity"
        ]
      },
      "innovation": {
        "weight": 10,
        "criteria": [
          "Creative bonus features",
          "Unique UI/UX improvements",
          "Performance optimizations",
          "Accessibility considerations"
        ]
      }
    },
    "milestones": [
      {
        "milestone": "Setup & Basic Structure",
        "deadline": "Day 1",
        "deliverables": ["Component structure", "Basic UI layout", "State initialization"]
      },
      {
        "milestone": "Core CRUD Operations",
        "deadline": "Day 3",
        "deliverables": ["Add, edit, delete tasks", "Task completion toggle", "Form validation"]
      },
      {
        "milestone": "Filtering & Search",
        "deadline": "Day 5",
        "deliverables": ["Search functionality", "Filter by status/priority", "Local storage integration"]
      },
      {
        "milestone": "Polish & Testing",
        "deadline": "Day 7",
        "deliverables": ["UI improvements", "Error handling", "Bonus features", "Final testing"]
      }
    ],
    "submission": {
      "format": "GitHub repository link",
      "requirements": [
        "README.md with setup instructions",
        "Live demo link (optional)",
        "Code documentation",
        "Feature demonstration video (optional)"
      ],
      "grading_scale": {
        "A": "90-100 points - Exceptional work with creative bonus features",
        "B": "80-89 points - Solid implementation of all core requirements",
        "C": "70-79 points - Most requirements met with minor issues",
        "D": "60-69 points - Basic functionality with significant gaps",
        "F": "Below 60 points - Incomplete or non-functional submission"
      }
    }
  }
}