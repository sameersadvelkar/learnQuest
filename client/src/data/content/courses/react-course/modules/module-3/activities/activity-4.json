{
  "id": 14,
  "moduleId": 3,
  "title": "Simulation: Event Handling Workshop",
  "description": "Interactive simulation for mastering React event handling patterns",
  "type": "simulation",
  "orderIndex": 3,
  "duration": 40,
  "isLocked": false,
  "content": {
    "type": "interactive_simulation",
    "title": "Event Handling Workshop",
    "scenarios": [
      {
        "id": "scenario1",
        "title": "Click Events & State Updates",
        "description": "Learn to handle click events and update state accordingly",
        "setup": {
          "initialCode": "function ButtonCounter() {\n  const [count, setCount] = useState(0);\n  \n  // Add your event handler here\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button>Click me!</button>\n    </div>\n  );\n}",
          "objective": "Make the button increment the counter when clicked",
          "hints": [
            "Add an onClick prop to the button",
            "Create a function that updates the count state",
            "Use setCount to increment the value"
          ]
        },
        "solution": "function ButtonCounter() {\n  const [count, setCount] = useState(0);\n  \n  const handleClick = () => {\n    setCount(count + 1);\n  };\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={handleClick}>Click me!</button>\n    </div>\n  );\n}",
        "tests": [
          "Button should have onClick handler",
          "Clicking button should increment count",
          "Count should display current value"
        ]
      },
      {
        "id": "scenario2",
        "title": "Form Input Handling",
        "description": "Master controlled components and form input handling",
        "setup": {
          "initialCode": "function NameForm() {\n  const [name, setName] = useState('');\n  \n  // Add your change handler here\n  \n  return (\n    <form>\n      <input \n        type=\"text\" \n        placeholder=\"Enter your name\"\n        value={name}\n      />\n      <p>Hello, {name || 'Anonymous'}!</p>\n    </form>\n  );\n}",
          "objective": "Make the input update the greeting in real-time",
          "hints": [
            "Add an onChange prop to the input",
            "Extract the value from the event object",
            "Update the name state with the new value"
          ]
        },
        "solution": "function NameForm() {\n  const [name, setName] = useState('');\n  \n  const handleChange = (e) => {\n    setName(e.target.value);\n  };\n  \n  return (\n    <form>\n      <input \n        type=\"text\" \n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={handleChange}\n      />\n      <p>Hello, {name || 'Anonymous'}!</p>\n    </form>\n  );\n}",
        "tests": [
          "Input should be controlled by state",
          "Typing should update the greeting",
          "Value should persist in the input field"
        ]
      },
      {
        "id": "scenario3",
        "title": "Event Delegation & Dynamic Lists",
        "description": "Handle events in dynamic lists efficiently",
        "setup": {
          "initialCode": "function TodoList() {\n  const [todos, setTodos] = useState([\n    { id: 1, text: 'Learn React', completed: false },\n    { id: 2, text: 'Build an app', completed: false }\n  ]);\n  \n  // Add your toggle handler here\n  \n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>\n          <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n            {todo.text}\n          </span>\n          <button>Toggle</button>\n        </li>\n      ))}\n    </ul>\n  );\n}",
          "objective": "Make the toggle button mark todos as completed/uncompleted",
          "hints": [
            "Create a function that takes the todo ID",
            "Use map to update the specific todo",
            "Toggle the completed property"
          ]
        },
        "solution": "function TodoList() {\n  const [todos, setTodos] = useState([\n    { id: 1, text: 'Learn React', completed: false },\n    { id: 2, text: 'Build an app', completed: false }\n  ]);\n  \n  const toggleTodo = (id) => {\n    setTodos(todos.map(todo => \n      todo.id === id \n        ? { ...todo, completed: !todo.completed }\n        : todo\n    ));\n  };\n  \n  return (\n    <ul>\n      {todos.map(todo => (\n        <li key={todo.id}>\n          <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n            {todo.text}\n          </span>\n          <button onClick={() => toggleTodo(todo.id)}>Toggle</button>\n        </li>\n      ))}\n    </ul>\n  );\n}",
        "tests": [
          "Each button should toggle its specific todo",
          "Completed todos should have line-through styling",
          "State should update immutably"
        ]
      },
      {
        "id": "scenario4",
        "title": "Complex Event Handling",
        "description": "Handle multiple event types and prevent default behaviors",
        "setup": {
          "initialCode": "function AdvancedForm() {\n  const [formData, setFormData] = useState({ email: '', message: '' });\n  const [submitted, setSubmitted] = useState(false);\n  \n  // Add your event handlers here\n  \n  return (\n    <form>\n      <input \n        type=\"email\" \n        placeholder=\"Email\"\n        value={formData.email}\n      />\n      <textarea \n        placeholder=\"Message\"\n        value={formData.message}\n      />\n      <button type=\"submit\">Submit</button>\n      {submitted && <p>Form submitted successfully!</p>}\n    </form>\n  );\n}",
          "objective": "Handle form submission, prevent page reload, and update multiple form fields",
          "hints": [
            "Prevent default form submission with e.preventDefault()",
            "Create handlers for input and textarea changes",
            "Update the appropriate field in formData state"
          ]
        },
        "solution": "function AdvancedForm() {\n  const [formData, setFormData] = useState({ email: '', message: '' });\n  const [submitted, setSubmitted] = useState(false);\n  \n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setSubmitted(true);\n    setTimeout(() => setSubmitted(false), 3000);\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"email\" \n        name=\"email\"\n        placeholder=\"Email\"\n        value={formData.email}\n        onChange={handleInputChange}\n      />\n      <textarea \n        name=\"message\"\n        placeholder=\"Message\"\n        value={formData.message}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\">Submit</button>\n      {submitted && <p>Form submitted successfully!</p>}\n    </form>\n  );\n}",
        "tests": [
          "Form submission should be prevented from reloading page",
          "Both inputs should update their respective state fields",
          "Success message should appear after submission"
        ]
      }
    ],
    "progressTracking": {
      "trackCompletions": true,
      "showProgress": true,
      "allowRetry": true
    },
    "completionCriteria": {
      "scenariosCompleted": 4,
      "allTestsPassed": true
    }
  }
}