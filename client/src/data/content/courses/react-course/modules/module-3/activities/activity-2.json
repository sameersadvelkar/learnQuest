{
  "id": 12,
  "moduleId": 3,
  "title": "Exercise: State Management Practice",
  "description": "Hands-on exercises to practice state management patterns",
  "type": "exercise",
  "orderIndex": 1,
  "duration": 30,
  "isLocked": false,
  "content": {
    "type": "guided_exercise",
    "exercises": [
      {
        "id": "ex1",
        "title": "Build a Shopping Cart",
        "difficulty": "Beginner",
        "description": "Create a shopping cart component with add/remove functionality",
        "instructions": [
          "Create a state to hold cart items (array of objects)",
          "Add function to add items to cart",
          "Add function to remove items from cart",
          "Display total count and price",
          "Handle quantity updates"
        ],
        "starterCode": "function ShoppingCart() {\n  // TODO: Add state for cart items\n  \n  const addItem = (product) => {\n    // TODO: Implement add functionality\n  };\n  \n  const removeItem = (productId) => {\n    // TODO: Implement remove functionality\n  };\n  \n  const updateQuantity = (productId, quantity) => {\n    // TODO: Implement quantity update\n  };\n  \n  return (\n    <div>\n      <h2>Shopping Cart</h2>\n      {/* TODO: Render cart items */}\n    </div>\n  );\n}",
        "solution": "function ShoppingCart() {\n  const [cartItems, setCartItems] = useState([]);\n  \n  const addItem = (product) => {\n    setCartItems(prev => {\n      const existing = prev.find(item => item.id === product.id);\n      if (existing) {\n        return prev.map(item => \n          item.id === product.id \n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        );\n      }\n      return [...prev, { ...product, quantity: 1 }];\n    });\n  };\n  \n  const removeItem = (productId) => {\n    setCartItems(prev => prev.filter(item => item.id !== productId));\n  };\n  \n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeItem(productId);\n      return;\n    }\n    setCartItems(prev => \n      prev.map(item => \n        item.id === productId ? { ...item, quantity } : item\n      )\n    );\n  };\n  \n  const total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n  \n  return (\n    <div>\n      <h2>Shopping Cart ({cartItems.length} items)</h2>\n      {cartItems.map(item => (\n        <div key={item.id}>\n          <span>{item.name} - ${item.price} x {item.quantity}</span>\n          <button onClick={() => updateQuantity(item.id, item.quantity + 1)}>+</button>\n          <button onClick={() => updateQuantity(item.id, item.quantity - 1)}>-</button>\n          <button onClick={() => removeItem(item.id)}>Remove</button>\n        </div>\n      ))}\n      <div>Total: ${total.toFixed(2)}</div>\n    </div>\n  );\n}",
        "hints": [
          "Use useState to manage the cart items array",
          "Check if item already exists before adding",
          "Use map() to update specific items",
          "Use filter() to remove items",
          "Calculate total using reduce()"
        ]
      },
      {
        "id": "ex2",
        "title": "Form with Validation",
        "difficulty": "Intermediate",
        "description": "Build a registration form with real-time validation",
        "instructions": [
          "Create state for form fields (name, email, password, confirmPassword)",
          "Create state for validation errors",
          "Implement real-time validation",
          "Show/hide error messages",
          "Disable submit button when form is invalid"
        ],
        "starterCode": "function RegistrationForm() {\n  // TODO: Add state for form data and errors\n  \n  const validateField = (field, value) => {\n    // TODO: Implement validation logic\n  };\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // TODO: Handle form submission\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      {/* TODO: Add form fields with validation */}\n    </form>\n  );\n}",
        "solution": "function RegistrationForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: ''\n  });\n  \n  const [errors, setErrors] = useState({});\n  \n  const validateField = (field, value) => {\n    let error = '';\n    \n    switch (field) {\n      case 'name':\n        if (!value.trim()) error = 'Name is required';\n        else if (value.length < 2) error = 'Name must be at least 2 characters';\n        break;\n      case 'email':\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!value) error = 'Email is required';\n        else if (!emailRegex.test(value)) error = 'Invalid email format';\n        break;\n      case 'password':\n        if (!value) error = 'Password is required';\n        else if (value.length < 6) error = 'Password must be at least 6 characters';\n        break;\n      case 'confirmPassword':\n        if (!value) error = 'Please confirm your password';\n        else if (value !== formData.password) error = 'Passwords do not match';\n        break;\n    }\n    \n    setErrors(prev => ({ ...prev, [field]: error }));\n  };\n  \n  const handleChange = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    validateField(field, value);\n  };\n  \n  const isFormValid = Object.values(errors).every(error => !error) && \n                     Object.values(formData).every(value => value.trim());\n  \n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (isFormValid) {\n      alert('Registration successful!');\n    }\n  };\n  \n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Name\"\n          value={formData.name}\n          onChange={(e) => handleChange('name', e.target.value)}\n        />\n        {errors.name && <span className=\"error\">{errors.name}</span>}\n      </div>\n      \n      <div>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={formData.email}\n          onChange={(e) => handleChange('email', e.target.value)}\n        />\n        {errors.email && <span className=\"error\">{errors.email}</span>}\n      </div>\n      \n      <div>\n        <input\n          type=\"password\"\n          placeholder=\"Password\"\n          value={formData.password}\n          onChange={(e) => handleChange('password', e.target.value)}\n        />\n        {errors.password && <span className=\"error\">{errors.password}</span>}\n      </div>\n      \n      <div>\n        <input\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          value={formData.confirmPassword}\n          onChange={(e) => handleChange('confirmPassword', e.target.value)}\n        />\n        {errors.confirmPassword && <span className=\"error\">{errors.confirmPassword}</span>}\n      </div>\n      \n      <button type=\"submit\" disabled={!isFormValid}>\n        Register\n      </button>\n    </form>\n  );\n}",
        "hints": [
          "Use separate state objects for form data and errors",
          "Validate on every input change",
          "Use regex for email validation",
          "Compare password fields for confirmation",
          "Check all fields are valid before enabling submit"
        ]
      }
    ],
    "completionCriteria": {
      "exercisesCompleted": 2,
      "codeExecuted": true,
      "testsPass": true
    }
  }
}